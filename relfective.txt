Reflective report –

-	If last module taught me a lot about production – then this module taught me a lot about design. 
-	In a talk, Johnathan Blow describes the idea of game design as building a space of rules, and asking questions of this space. Good games have rules and mechanics which lead to interesting results. 
-	“You build constructs out of ‘what If’ questions and then ask what the consequences are” https://youtu.be/OGSeLSmOALU -Jonathan Blow- Designing to Reveal the Nature of the Universe.
-	It is my assertion that ‘gameplay’ lives or dies on the consequences of rules interacting with mechanics. The player’s choices result from understanding these consequences and exploiting them to succeed. As such integrity, consistency and novelty in rules and mechanics is essential to making a good game.  
-	Computers are excellent at showing designers what the natural consequences of rules and mechanics are.
-	 The reverse of this is that programmers must necessarily and constantly consider specifically how these game interactions occur in order to make the game. 
-	Despite this, programmers are not necessarily game designers, so having to make these choices is usually a bind. Without specific guidance from designers, it is really hard to make a game. 

-	Throughout this project, there seemed to be a kind of separation between the disciplines. I will focus on the conflict between designers and programmers, which occurred when a problem occurs in code that has a design implication. Instead of recognising the design implication, it was tasked to the coders to fix like it was a bug.
-	A clear example of this was – what happens when you die in this game. It was a design choice that the enemies would be stunned when you shoot them – freezing them in place so the player could continue. This is a rule.  Another rule is that the player can possess enemies and use their abilities. This is another rule.  If we want to be consistent with the first rule, then the enemies must all have stun weapons. This is a consequence of these two rules interacting. 
-	A further consequence of these two rules interacting, was that if you were ever shot by an enemy, you would fall onto the ground, and the enemy AI would stand next to you and stun you indefinitely – until you quit the game. 
-	I would argue that despite appearances, this is not a bug. The program is not behaving unexpectedly; it is instead perfectly following the rules we supplied it. The trouble is that these rules had an unexpected result.
-	I repeatedly asked the designers to think of a solution, but nothing happened. In the end – about a couple of days before our inline review, I wrote piece of code in the weapon which checked if the ‘player’ had taken more than 10 hits, and if so the game would reset. 
-	This patch was necessary to actually play the game, but it didn’t come from a designer. Because of this, it was a generic solution, which contradicted the inherent rules at play. As established in the second rule, there is no distinction between a ‘player and any other robot. 
-	In my eyes it is a squandered opportunity to think through the consequences of the rules we have at play. 

-	Aside from just being a source of problems – programmers can actually find interesting and useful results from code. 

-	I ended up doing something which didn’t particularly interest me –UI programing has its challenges and is important to a game, but over the course of the module I kind of realised that the direction I wanted to take in the industry was more creative and design orientated than strictly coding.
-	In UI, I felt really far away from the rest of the team, kind of doing my own thing without a huge amount of oversite. This experience was quite valuable – I felt like I could write features that I thought were interesting, instead of having much direct oversite. On the other hand, I also felt a little side-lined, a lot of the features which I implemented were not really supported by the rest of the team. 
-	An example of this was RuShi’s desk, which I proposed at the start of the project as an idea for a diegetic menu screen, where the player would play as RuShi, at a desk on a space station. 
-	I thought this was a good idea. My thinking was that this succinctly expressed the story relationship between RuShi and REV – that RuShi was controlling REV from a space station above the planet. I also thought it allowed for lots of characterisation of RuShi from the menu screen- the music RuShi is playing, the things lying around her desk, even programs she might have on her computer- all of these things give a sense of who this character is and more about the world she inhabits. 
-	This idea evolved from my implementation of the hud, where I realised that UI elements are components of objects – which can be rendered in world space as opposed to just screen space. This was a case where design ideas came from the inherent possibilities of code.
-	It also revealed to me that on reflection – the desk wasn’t actually that important. Instead it was a step towards realising a way I work. What I need to do to feel like I am doing good and important work.  That some creative freedom is essential to my motivation – and even to some small degree my mental health. 

-	Further design choices which emerged from code were the gravity gun, which came from a realisation that the robots were physics objects, and as such could be easily manipulated by arbitrary outside forces.
